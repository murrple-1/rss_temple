# Generated by Django 4.2.2 on 2023-06-06 23:28

import uuid

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("attributes", models.JSONField(default=dict)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FacebookLogin",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("profile_id", models.CharField(max_length=96)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FavoriteFeedEntryUserMapping",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Feed",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("feed_url", models.TextField(unique=True)),
                ("title", models.TextField()),
                ("home_url", models.TextField(null=True)),
                (
                    "published_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(null=True)),
                (
                    "db_created_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("db_updated_at", models.DateTimeField(null=True)),
                (
                    "update_backoff_until",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeedEntry",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("id", models.TextField(null=True)),
                ("created_at", models.DateTimeField(null=True)),
                (
                    "published_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(null=True)),
                ("title", models.TextField()),
                ("url", models.TextField()),
                ("content", models.TextField()),
                ("author_name", models.TextField(null=True)),
                (
                    "db_created_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("db_updated_at", models.DateTimeField(null=True)),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.feed"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeedSubscriptionProgressEntry",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Not Started"), (1, "Started"), (2, "Finished")],
                        default=0,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotifyEmailQueueEntry",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("subject", models.CharField(max_length=256)),
                ("plain_text", models.TextField(null=True)),
                ("html_text", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="VerificationToken",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserCategory",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("text", models.TextField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubscribedFeedUserMapping",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("custom_feed_title", models.TextField(null=True)),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.feed"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReadFeedEntryUserMapping",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("read_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "feed_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.feedentry"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotifyEmailQueueEntryRecipient",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "type",
                    models.IntegerField(choices=[(0, "To"), (1, "CC"), (2, "BCC")]),
                ),
                ("email", models.CharField(max_length=256)),
                (
                    "entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.notifyemailqueueentry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoogleLogin",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("g_user_id", models.CharField(max_length=96)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FeedUserCategoryMapping",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.feed"
                    ),
                ),
                (
                    "user_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.usercategory",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeedSubscriptionProgressEntryDescriptor",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("feed_url", models.TextField()),
                ("custom_feed_title", models.TextField(null=True)),
                ("user_category_text", models.TextField(null=True)),
                ("is_finished", models.BooleanField(default=False)),
                (
                    "feed_subscription_progress_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.feedsubscriptionprogressentry",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="feed",
            index=models.Index(
                fields=["update_backoff_until"], name="api_feed_update__033cc4_idx"
            ),
        ),
        migrations.AddField(
            model_name="favoritefeedentryusermapping",
            name="feed_entry",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.feedentry"
            ),
        ),
        migrations.AddField(
            model_name="favoritefeedentryusermapping",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="facebooklogin",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usercategory",
            unique_together={("user", "text")},
        ),
        migrations.AlterUniqueTogether(
            name="subscribedfeedusermapping",
            unique_together={("user", "custom_feed_title"), ("user", "feed")},
        ),
        migrations.AlterUniqueTogether(
            name="readfeedentryusermapping",
            unique_together={("feed_entry", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="feedusercategorymapping",
            unique_together={("feed", "user_category")},
        ),
        migrations.AddIndex(
            model_name="feedentry",
            index=models.Index(fields=["id"], name="api_feedent_id_6f9c14_idx"),
        ),
        migrations.AddIndex(
            model_name="feedentry",
            index=models.Index(fields=["url"], name="api_feedent_url_a60cf6_idx"),
        ),
        migrations.AddConstraint(
            model_name="feedentry",
            constraint=models.UniqueConstraint(
                condition=models.Q(("updated_at__isnull", True)),
                fields=("feed", "url"),
                name="unique__feed__url__when__updated_at__null",
            ),
        ),
        migrations.AddConstraint(
            model_name="feedentry",
            constraint=models.UniqueConstraint(
                fields=("feed", "url", "updated_at"),
                name="unique__feed__url__when__updated_at__not_null",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="favoritefeedentryusermapping",
            unique_together={("feed_entry", "user")},
        ),
    ]
