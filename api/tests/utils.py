import itertools
import os
from typing import Callable, Generator, NamedTuple
from unittest import TestCase

from bs4 import BeautifulSoup, Tag
from django.core import mail
from django.http.response import HttpResponse
from django.template.loader import get_template
from django.test.utils import TestContextDecorator
from lingua import Language
from silk.config import SilkyConfig

from api.models import Language as Language_


def debug_print_last_email() -> None:
    if os.getenv("TEST_EMAILS_CONSOLE") == "true":
        print(getattr(mail, "outbox")[-1].message())


def reusable_captcha_key() -> str:
    # generated by `secrets.token_urlsafe()`
    return "XOuZynTK0uP3jAhN2rZ9JkC6tnSLmXidLkjqIxgoHU8"


def reusable_captcha_seed() -> str:
    # generated by `secrets.token_hex()`
    return "66ba106a3612438180e5b1711dd28cd2dc9365c107960f43c28c1477c27f1f40"


def db_migrations_state():
    "Setup the DB as-if the various RunPython migration scripts were run"
    Language_.objects.get_or_create(
        iso639_3="UND", defaults={"iso639_1": "UN", "name": "UNDEFINED"}
    )
    Language_.objects.bulk_create(
        (
            Language_(
                iso639_3=lang.iso_code_639_3.name,
                iso639_1=lang.iso_code_639_1.name,
                name=lang.name,
            )
            for lang in Language.all()
        ),
        ignore_conflicts=True,
    )


class disable_throttling(TestContextDecorator):
    def enable(self):
        from rest_framework.throttling import SimpleRateThrottle

        self.old_allow_request = getattr(SimpleRateThrottle, "allow_request")

        def _allow_request(self, request, view):
            return True

        setattr(SimpleRateThrottle, "allow_request", _allow_request)

    def disable(self):
        from rest_framework.throttling import SimpleRateThrottle

        setattr(SimpleRateThrottle, "allow_request", self.old_allow_request)


class disable_silk(TestContextDecorator):
    def enable(self):
        self.old_attrs = SilkyConfig().attrs
        SilkyConfig().attrs["SILKY_PYTHON_PROFILER"] = False
        SilkyConfig().attrs["SILKY_INTERCEPT_PERCENT"] = 0

    def disable(self):
        SilkyConfig().attrs = self.old_attrs


class TopImagePage(NamedTuple):
    i: int
    url: str
    title: str
    content_curry: str


def generate_top_image_pages(
    live_server_url: str,
) -> Generator[TopImagePage, None, None]:
    template = get_template("tests/entry.html")

    # via https://github.com/python-pillow/Pillow/blob/26fc975a6506983076627f4ff1ac2dfea39c3d19/Tests/test_file_jpeg.py#L864C16-L864C16
    with open("api/tests/test_files/site/images/generated/malformed.jpg", "wb") as f:
        f.write(b"\xff" * 4097)

    i = 1
    for og_tag_filename, img_tag_filename in itertools.product(
        (
            None,
            "64x64.jpg",
            "128x128.jpg",
            "256x256.jpg",
            "512x512.jpg",
            "notexist.jpg",
            "generated/malformed.jpg",
            "notanimage.txt",
        ),
        repeat=2,
    ):
        rendered_content = template.render(
            {
                "i": i,
                "hostname": live_server_url,
                "og_tag_filename": og_tag_filename,
                "img_tag_filename": img_tag_filename,
            }
        )

        html_filename = f"entry_{og_tag_filename.replace('.', '').replace('/', '_') if og_tag_filename is not None else None}_{img_tag_filename.replace('.', '').replace('/', '_') if img_tag_filename is not None else None}.html"

        html_filepath = os.path.join(
            "api/tests/test_files/site/generated/", html_filename
        )
        with open(html_filepath, "w") as f:
            f.write(rendered_content)

        soup = BeautifulSoup(rendered_content, "lxml")

        h1_tag = soup.find("h1")
        assert isinstance(h1_tag, Tag)
        title = h1_tag.text

        p_tag = soup.find("p")
        assert isinstance(p_tag, Tag)
        content = str(p_tag)

        yield TopImagePage(
            i,
            f"{live_server_url}/site/generated/{html_filename}",
            title,
            content,
        )

        i += 1

    for html_filename in ["entry_no_og_image_content.html"]:
        html_filepath = os.path.join("api/tests/test_files/site/", html_filename)
        with open(html_filepath, "r") as f:
            soup = BeautifulSoup(f, "lxml")

        h1_tag = soup.find("h1")
        assert isinstance(h1_tag, Tag)
        title = h1_tag.text

        p_tag = soup.find("p")
        assert isinstance(p_tag, Tag)
        content = str(p_tag)

        yield TopImagePage(
            i,
            f"{live_server_url}/site/{html_filename}",
            title,
            content,
        )

        i += 1


def assert_x_cache_hit_working(
    test_case: TestCase, run_fn: Callable[[], HttpResponse], all_caches_involved=True
):
    response = run_fn()
    cache_hit_iter = (h == "NO" for h in response.headers["X-Cache-Hit"].split(","))
    test_case.assertTrue(
        all(cache_hit_iter) if all_caches_involved else any(cache_hit_iter)
    )

    response = run_fn()
    cache_hit_iter = (h == "YES" for h in response.headers["X-Cache-Hit"].split(","))
    test_case.assertTrue(
        all(cache_hit_iter) if all_caches_involved else any(cache_hit_iter)
    )
