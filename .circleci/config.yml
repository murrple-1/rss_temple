version: 2.1
workflows:
  version: 2
  build_and_test:
    jobs:
      - build_latest:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - build_tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test

jobs:
  build_latest:
    docker:
    - image: docker:20
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Build
          command: docker build -t rss_temple:latest .
      - run:
          name: Docker Upload
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag rss_temple:latest $DOCKER_USERNAME/rss_temple:latest
            docker push $DOCKER_USERNAME/rss_temple:latest

  build_tag:
    docker:
    - image: docker:20
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Build
          command: docker build -t rss_temple:$CIRCLE_TAG .
      - run:
          name: Docker Upload
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag rss_temple:$CIRCLE_TAG $DOCKER_USERNAME/rss_temple:$CIRCLE_TAG
            docker push $DOCKER_USERNAME/rss_temple:$CIRCLE_TAG

  test:
    docker:
      - image: cimg/python:3.10
        environment:
          PIPENV_VERBOSITY: -1
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
      - image: cimg/redis:7.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: pipenv setup
          command: |
            pip install -U pip
            pip install -U pipenv
      - run:
          name: pipenv install
          command: pipenv sync --dev
      - save_cache:
          key: dependency-cache-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/"
            - "~/.pyenv/"
      - run:
          name: tests
          command: pipenv run coverage run manage.py test --exclude-tag=remote api.tests
          environment:
            DB_HOST: localhost
            REDIS_HOST: localhost
            TEST_RUNNER_TYPE: xml
            TEST_OUTPUT_VERBOSE: 2
      - store_test_results:
          path: ~/rss_temple/test-results/
      - store_artifacts:
          path: ~/rss_temple/test-results/
      - run:
          name: codecov
          command: pipenv run codecov -X gcov
